name: Setup BoxLang CLI
description: Sets up BoxLang for GitHub Actions

branding:
  icon: terminal
  color: green

inputs:
  modules:
    description: "Space-delimited list of modules to install"
    required: false
    default: ""
  version:
    description: "BoxLang version to install"
    required: false
    default: 'latest'
  skip-package-install:
    description: "Skip installation of auxiliary system packages (curl, zip, unzip, jq) and Java setup"
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - shell: bash
      id: install
      run: |
        set -euo pipefail  # Exit on error, undefined vars, pipe failures

        # Ensure TERM is set to avoid tput errors
        export TERM=${TERM:-xterm}

        # Install auxiliary system packages (curl, zip, unzip, jq) if not skipped
        if [[ "${{ inputs.skip-package-install }}" != "true" ]]; then
          echo "Installing required system packages (curl, zip, unzip, jq)..."
          if command -v apt-get &> /dev/null; then
            # Ubuntu / Debian
            sudo apt-get update
            sudo apt-get install -y curl zip unzip jq
          elif command -v yum &> /dev/null; then
            # RHEL / CentOS / Amazon Linux
            sudo yum install -y curl zip unzip jq
          elif command -v dnf &> /dev/null; then
            # Fedora
            sudo dnf install -y curl zip unzip jq
          elif command -v brew &> /dev/null; then
            # macOS
            brew install curl zip unzip jq
          else
            echo "Warning: Could not detect package manager. Assuming curl, zip, unzip, jq are already installed."
          fi
        else
          echo "Skipping installation of auxiliary system packages as requested"
        fi

    - name: Set up Temurin JDK 21
      if: ${{ inputs.skip-package-install == 'false' }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'none'

    - shell: bash
      id: install-boxlang
      run: |
        # Verify Java installation if not skipped
        if [[ "${{ inputs.skip-package-install }}" != "true" ]]; then
          echo "Verifying Java installation..."
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
        fi

        # Download BoxLang shell installer
        echo "Downloading BoxLang installer..."
        if ! curl -fsSL https://downloads.ortussolutions.com/ortussolutions/boxlang/install-boxlang.sh -o install-boxlang.sh; then
          echo "Failed to download BoxLang installer"
          exit 1
        fi

        # Verify the installer script exists
        if [[ ! -f install-boxlang.sh ]]; then
          echo "Installer script not found"
          exit 1
        fi

        # Make the script executable
        chmod +x install-boxlang.sh

        # Call installer with desired version
        echo "Installing BoxLang version: ${{ inputs.version }}"
        if ! ./install-boxlang.sh ${{ inputs.version }}; then
          echo "BoxLang installation failed"
          echo "Java version:"
          java -version || echo "Java not found"
          echo "JAVA_HOME: ${JAVA_HOME:-not set}"
          exit 1
        fi

        # Install any BoxLang modules requested
        INSTALL_MODULES="${{ inputs.modules }}"
        if [[ -n "$INSTALL_MODULES" ]]; then
          echo "Installing modules: $INSTALL_MODULES"
          if ! install-bx-module $INSTALL_MODULES; then
            echo "Module installation failed"
            exit 1
          fi
          echo "Modules installed successfully"
        fi

        # Verify BoxLang is on the PATH and show version
        echo "Verifying BoxLang installation..."
        if ! boxlang --version; then
          echo "BoxLang installation verification failed"
          exit 1
        fi

        # Export BOXLANG_HOME to environment
        echo "BOXLANG_HOME=$HOME/.boxlang" >> $GITHUB_ENV

        # Capture version and installation path
        BOXLANG_VERSION=$(boxlang --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?' || echo "unknown")
        BOXLANG_PATH=$(which boxlang || echo "unknown")

        # Set outputs
        echo "version=$BOXLANG_VERSION" >> $GITHUB_OUTPUT
        echo "path=$BOXLANG_PATH" >> $GITHUB_OUTPUT

        # Clean up
        rm -f install-boxlang.sh

        echo "BoxLang setup completed successfully"

outputs:
  boxlang-version:
    description: "The version of BoxLang that was installed"
    value: ${{ steps.install-boxlang.outputs.version }}
  installation-path:
    description: "The path where BoxLang was installed"
    value: ${{ steps.install-boxlang.outputs.path }}
